title: Introduction

Acacian is an implementation of ACN (<Architecture for 
Control Networks at http://tsp.plasa.org/tsp/documents/published_docs.php>) 
written in C. Its aim is to be a full and 
efficient implementation of all the major parts of the ACN standard 
which are not covered by other freely available open-source software.

Implicit to Acacian is the recognition that there is no "typical" ACN 
component. Equipment varies from devices using embedded processors 
with only the most minimal operating system reuired to support a 
TCP/IP stack; to complex controllers with "big" operating systems 
designed to auto-adapt to anything they encounter in a large and 
complex network.

Included within Acacian are:

- ACN Root Layer for UDP

- SDT protocol. A full and efficient implementation allowing multiple
  sessions and channels, and multiple client protocols.

- DMP implementation offering: Parsing and unpacking of messages; 
  Relating incoming messages to properties within a device property 
  map; Cumulative processing of multiple messages and aggregation of 
  responses.

- DDL Parser and property map generator: Works statically to generate
  maps to be compiled in to device code; Works dynamically for 
  controller use; Generates compact in-memory device tree 
  representation which may be retained and used by controller code, 
  or deleted after parse if not required.
  
- E1.31 (sACN) receive module

- Fast optimized handling of UUID keys for tracking and managing
  Components device types or DDL modules.

- An optional event loop which can handle all timing and network I/O 
  functions for an entire single-threaded application.

- Logging and debug macros.

- low level network interface using BSD Sockets API for both IPv4 and IPv6.

topic: Focus

Acacian has focused on getting an efficient implementation of the 
middleware code. It has been built using GCC and Gnu Make and run on 
a variety of desktop and embedded Linux systems, however OS 
dependencies have been kept out of the main code files as much as 
possible.

Except for a few OS specific pieces the code is written in ISO C99 
and extensions have been avoided.

In order to make an implementation which can work on a big system, 
yet is not bloated and inefficient on a small one with limited 
scope, there are a plethora of configuration options and many 
implementation details are disguised behind macros which expand 
differently depending on the configuration. Some of these options are
aspirational in that they have been included because they offer a
potentially useful choice but at present only one of the paths offered
by that choice has been implemented. Others while implemented have not 
been tested much or may not work with other choices.

topic: Relationship to OpenACN

Acacian includes completely new implementations of SDT, DMP, E1.31, 
DDL and many helper routines including component tracking and timing 
and event routines.

However, some parts of the build and configuration structure, the 
network interface layer, the root layer protocol, logging functions 
and a few helper routines have been adapted to a greater or lesser 
extent from openACN originals. Where those originals carried a 
copyright of Engineering Arts or Philip Nye, the copyright and 
license for the Acacian version has been changed to match the general 
Acacian license (the original versions are of course still available 
under the openACN BSD license at Sourceforge). Where the copyright 
was held by another party the original copyright and license have 
been preserved.

topic: Using Acacian

The way you use Acacian will depend very much on your application. Some
very rudimentary command line demonstration programs are provided.
However, for this documentation an implementation which operates 
DMP, SDT and the Root Layer on UDP on a POSIX OS is regarded as 
"standard". DMP uses device property maps which are generated from 
DDL, either statically for device code, or dynamically for 
controller code.

A good place to start is by creating the local configuration header 
file for your build: "acncfg_local.h". Looking through <acncfg.h> in 
the main source tree documents nearly all options. See
<Configuration and Framework>
